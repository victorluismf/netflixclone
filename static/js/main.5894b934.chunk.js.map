{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeatureMovie.js","App.js","index.js"],"names":["languageapi","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","className","results","length","map","item","key","src","poster_path","alt","original_title","firstDate","Date","release_date","genres","i","push","name","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","vote_average","getFullYear","runtime","overview","href","join","useState","movieList","setMovieList","featureData","setFeatureData","useEffect","Tmdb","list","originals","filter","randomChosen","Math","floor","random","chosen","id","chosenInfo","loadAll","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAIMA,G,MAAc,2DAEdC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACGC,MAAM,GAAD,OANV,gCAMU,OAAeF,IADvB,cACTG,EADS,gBAEIA,EAAIC,OAFR,cAETA,EAFS,yBAGRA,GAHQ,2CAAH,sDAMD,GACXC,YAAY,WAAD,4BAAE,sBAAAJ,EAAA,sEAKYF,EAAW,sBAAD,OAAuBD,IAL7C,gCAGDQ,KAAM,WACNC,MAAO,4BACPC,MALC,eAUYT,EAAW,oBAAD,OAAqBD,IAV3C,gCAQDQ,KAAM,WACNC,MAAO,UACPC,MAVC,gBAeYT,EAAW,kCAAD,OAAmCD,IAfzD,iCAaDQ,KAAM,SACNC,MAAO,aACPC,MAfC,gBAoBYT,EAAW,kCAAD,OAAmCD,IApBzD,iCAkBDQ,KAAM,SACNC,MAAO,aACPC,MApBC,gBAyBYT,EAAW,kCAAD,OAAmCD,IAzBzD,iCAuBDQ,KAAM,SACNC,MAAO,SACPC,MAzBC,gBA8BYT,EAAW,qCAAD,OAAsCD,IA9B5D,mCA4BDQ,KAAM,UACNC,MAAO,UACPC,MA9BC,iBAmCYT,EAAW,kCAAD,OAAmCD,IAnCzD,mCAiCDQ,KAAM,cACNC,MAAO,mBACPC,MAnCC,6GAAF,kDAAC,GAuCZC,aAAa,WAAD,4BAAE,WAAOC,EAASC,GAAhB,eAAAV,EAAA,yDACNW,EAAO,IACRF,EAFO,sBAGCC,EAHD,OAIG,UAJH,OAOG,OAPH,uCAKeZ,EAAW,UAAD,OAAWW,EAAX,YAAsBZ,IAL/C,cAKEc,EALF,oDAQeb,EAAW,OAAD,OAAQW,EAAR,YAAmBZ,IAR5C,eAQEc,EARF,6DAYHA,GAZG,4CAAF,qDAAC,I,eCjDF,cAAqB,IAAnBL,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MACpB,OACI,sBAAKK,UAAU,WAAf,UACI,6BAAKN,IACL,qBAAKM,UAAU,qBAAf,SACI,qBAAKA,UAAU,iBAAf,SACKL,EAAMM,QAAQC,OAAS,GAAKP,EAAMM,QAAQE,KAAI,SAACC,EAAMC,GAAP,OAC3C,qBAAeL,UAAU,iBAAzB,SACI,qBAAKM,IAAG,yCAAoCF,EAAKG,aAAeC,IAAKJ,EAAKK,kBADpEJ,cCPnB,G,MAAA,YAAa,IAAXD,EAAU,EAAVA,KAETM,EAAY,IAAIC,KAAKP,EAAKQ,cAC1BC,EAAS,GACb,IAAK,IAAIC,KAAKV,EAAKS,OACfA,EAAOE,KAAMX,EAAKS,OAAOC,GAAGE,MAGhC,OACI,yBAAShB,UAAU,WAAWiB,MAAO,CACjCC,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,0CAAD,OAA4ChB,EAAKiB,cAAjD,MAHnB,SAKI,qBAAKrB,UAAU,qBAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCI,EAAKV,QACtC,sBAAKM,UAAU,iBAAf,UACI,sBAAKA,UAAU,mBAAf,UAAmCI,EAAKkB,aAAxC,aACA,qBAAKtB,UAAU,iBAAf,SAAiCU,EAAUa,gBAC3C,sBAAKvB,UAAU,oBAAf,UAAoCI,EAAKoB,QAAzC,iBAEJ,sBAAKxB,UAAU,wBAAf,cAAyCI,EAAKqB,YAC9C,sBAAKzB,UAAU,oBAAf,UACI,mBAAG0B,KAAK,wBAAwB1B,UAAU,wBAA1C,6BACA,mBAAG0B,KAAK,2BAA2B1B,UAAU,yBAA7C,8BAEJ,sBAAKA,UAAU,mBAAf,UAAkC,kDAA2Ba,EAAOc,KAAK,kBCxB9E,aAEb,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,MAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAeA,OAbAC,qBAAU,YACK,uCAAG,oCAAA7C,EAAA,sEACG8C,EAAK1C,cADR,cACV2C,EADU,OAEdL,EAAaK,GACTC,EAAYD,EAAKE,QAAO,SAAAvB,GAAC,MAAa,aAAXA,EAAErB,QAC7B6C,EAAeC,KAAKC,MAAMD,KAAKE,UAAYL,EAAU,GAAGzC,MAAMM,QAAQC,OAAS,IAC/EwC,EAASN,EAAU,GAAGzC,MAAMM,QAAQqC,GAL1B,SAMSJ,EAAKtC,aAAa8C,EAAOC,GAAI,SANtC,OAMVC,EANU,OAOdZ,EAAeY,GAPD,4CAAH,qDASbC,KACC,IAGD,sBAAK7C,UAAU,OAAf,UACG+B,GACD,cAAC,EAAD,CAAc3B,KAAM2B,IAGpB,yBAAS/B,UAAU,QAAnB,SACG6B,EAAU1B,KAAI,SAACC,EAAMC,GAAP,OACb,cAAC,EAAD,CAAoBX,MAAOU,EAAKV,MAAOC,MAAOS,EAAKT,OAApCU,YC5BzByC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5894b934.chunk.js","sourcesContent":["const API_KEY = '2f3b02dc74737d6beb0268632df6751b';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst language = 'language=pt-BR'\r\nconst languageapi = 'language=pt-BR&api_key=2f3b02dc74737d6beb0268632df6751b'\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch(`/trending/all/week?${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&${languageapi}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&${languageapi}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {}\r\n        if(movieId) {\r\n            switch(type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?${languageapi}`)\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?${languageapi}`)\r\n                break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}","import React from 'react'\r\nimport './MovieRow.css'\r\n\r\nexport default ({title, items}) => {\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\">\r\n                    {items.results.length > 0 && items.results.map((item, key)=>(\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './FeatureMovie.css';\r\n\r\nexport default ({item}) => {\r\n\r\n    let firstDate = new Date(item.release_date);\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push( item.genres[i].name );\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.title}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--runtime\">{item.runtime} minutos</div>\r\n                    </div>\r\n                    <div className=\"featured--description\"> {item.overview}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href=\"{`/watch/${item.id}`}\" className=\"featured--watchbutton\">► Assistir</a>\r\n                        <a href=\"{`/list/add/${item.id}`}\" className=\"featured--mylistbutton\">+ Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeatureMovie from './components/FeatureMovie';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n\n  useEffect(()=>{\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n      let originals = list.filter(i=>i.slug === 'trending');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'movie');\n      setFeatureData(chosenInfo)\n    }\n    loadAll();\n  }, []);\n\n  return (\n    <div className=\"page\">\n      {featureData &&\n      <FeatureMovie item={featureData}/>\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key)=>(\n          <MovieRow key={key} title={item.title} items={item.items}/>\n        ))}\n      </section>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}